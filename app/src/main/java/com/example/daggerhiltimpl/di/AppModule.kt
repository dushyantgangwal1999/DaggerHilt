package com.example.daggerhiltimpl.di

import android.app.Application
import com.example.daggerhiltimpl.data.remote.MyAPI
import com.example.daggerhiltimpl.data.repository.MyRepositoryImpl
import com.example.daggerhiltimpl.domain.repository.MyRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit
import javax.inject.Named
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideMyApi(): MyAPI{
        return Retrofit.Builder()
            .baseUrl("https://test.com")
            .build()
            .create(MyAPI::class.java)
    }

//    @Provides
//    @Singleton
//    fun provideMyRepository(api: MyAPI,application: Application,
//                            @Named("hello1") hello1 : String): MyRepository{
//        return MyRepositoryImpl(api,application)
//    }

    // If we move this repository to RepositoryModule. Then functionality will be same but code generated by
    // Dagger will be less. Only change we need to make is to use @Inject in RepositoryImpl.

    @Provides
    @Singleton
    @Named("hello1")
    fun provideStr1(): String = "hello1"

    @Provides
    @Singleton
    @Named("hello2")
    fun provideStr2(): String = "hello2"
}